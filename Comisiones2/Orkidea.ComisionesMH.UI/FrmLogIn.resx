<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwg
        JC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCABGAM4DASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDL+KHxQ8Y6B8RdV0vS9YNvZQGLy4hbxNtzEjHllJPJJ61j+Fvj
        Z4qi8RWn9t6r9q0922SoYI0xngNlVB4PNY/xm/5K1rn1h/8ARMdcHQB946XfpqFosyHORV6vGPgl4u/t
        LREsriTNxbfumyeSOx/L+Rr2cHIzQAUUUUARzzR28Ek8rqkcalnZjgADkk18peIPjh4wutevZdI1Y2um
        mU/Zofs0TFUHAyWQnJ69e9er/Hvxd/YnhBdFtpMXmqko2DysI++fx4X6E+lfLVAHtvwz+KninVfFRtda
        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
</value>
  </data>
</root>